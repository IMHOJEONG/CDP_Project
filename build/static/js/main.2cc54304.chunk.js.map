{"version":3,"sources":["components/Card.js","components/covid.png","components/CardContainer.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","this","props","prop","stateDt","accDefRate","stateTime","seq","clearCnt","accExamCnt","accExamCompCnt","createDt","deathCnt","decideCnt","examCnt","careCnt","resultNegCnt","updateDt","year","substring","month","day","className","scope","Math","round","React","Component","CardContainer","args","state","data","axios","get","makedata","console","log","setState","CardStyle","styled","div","map","test","index","key","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAyDeA,G,6KArDH,MAMCC,KAAKC,MAAMC,KAHZC,EAHA,EAGAA,QAAyBC,GAHzB,EAGSC,UAHT,EAGoBC,IAHpB,EAGyBF,YACTG,GAJhB,EAGqCC,WAHrC,EAIAC,eAJA,EAIgBF,UAAUG,EAJ1B,EAI0BA,SAAUC,EAJpC,EAIoCA,SAAUC,EAJ9C,EAI8CA,UAAWC,EAJzD,EAIyDA,QACjCC,GALxB,EAKAC,aALA,EAKcC,SALd,EAKwBF,SAKtBG,GAAQd,EAAQ,IAAIe,UAAU,EAAE,GAChCC,EAA2C,OAAlChB,EAAQ,IAAIe,UAAU,EAAE,GAAG,IAAcf,EAAQ,IAAIe,UAAU,EAAE,IAAMf,EAAQ,IAAIe,UAAU,EAAE,GACxGE,GAAQjB,EAAQ,IAAIe,UAAU,GACpC,OACI,yBAAKG,UAAU,yFACX,yBAAKA,UAAU,oBAEX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cACbJ,EADD,UACSE,EADT,UACkBC,EADlB,UAGA,2BAAOC,UAAU,wBACjB,+BACI,4BACA,wBAAIC,MAAM,OAAV,8BACA,wBAAIA,MAAM,OAAV,oCACA,wBAAIA,MAAM,OAAV,mCACA,wBAAIA,MAAM,OAAV,gDACA,wBAAIA,MAAM,OAAV,+BAGJ,+BACI,4BACA,4BAAKV,EAAL,UACA,4BAAKL,EAAL,UACA,4BAAKM,EAAL,UACA,4BAAKF,EAAL,UACA,4BAAKG,EAAL,aAIJ,uBAAGO,UAAU,aAAb,qCAAmCE,KAAKC,MAAMpB,EAAW,GAAzD,KACA,uBAAGiB,UAAU,aAAb,+BAAkCX,U,GA5CvCe,IAAMC,Y,QCFV,I,6PC0DAC,E,kDAlDX,aAAqB,IAAD,iDAALC,EAAK,yBAALA,EAAK,uBAChB,+BAASA,KACJC,MAAQ,CACTC,KAAO,MAHK,E,yMAWWC,IAAMC,IAAI,W,UAA3BC,E,OACFjC,KAAK6B,MAAMC,K,uBACXI,QAAQC,IAAIF,EAASH,KAAKA,M,kBACnB9B,KAAKoC,SAAS,CACjBN,KAAMG,EAASH,KAAKA,Q,uDAK5BI,QAAQC,IAAR,M,4JAMJnC,KAAKoC,SAAS,CACVN,KAAM,S,+BAIV,IAAMO,EAAYC,IAAOC,IAAV,KAQf,OACI,kBAACF,EAAD,CAAWhB,UAAU,iDAEZrB,KAAK6B,MAAMC,KACR9B,KAAK6B,MAAMC,KAAO9B,KAAK6B,MAAMC,KAAKU,KAAI,SAACC,EAAKC,GAAN,OAAgB,kBAAC,EAAD,CAAMxC,KAAMuC,EAAME,IAAKD,OAAa,0CAD3E,0C,GA3CXjB,IAAMC,WCOnBkB,E,uKARP,OACI,yBAAKvB,UAAU,2DACzB,0BAAMA,UAAU,wBAAhB,0B,GALmBI,IAAMC,WCYZmB,MAVf,WAEE,OACE,yBAAKxB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.2cc54304.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\nclass Card extends React.Component {\n\n    render(){\n        // const api = `http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson?serviceKey=1%2FEJ91e6fCvfjNcZwzIFg2MPmpgqoBzdVaySj2RcGHIQQhjC3zMYLETRi1EtZZt6mDeVr%2F1MnM0PcIkelqZEDA%3D%3D&pageNo=1&numOfRows=10&startCreateDt=20200821&endCreateDt=20200824`;\n        const { \n            stateDt, stateTime, seq, accDefRate, accExamCnt,\n            accExamCompCnt, clearCnt, createDt, deathCnt, decideCnt, examCnt,\n            resultNegCnt, updateDt, careCnt\n         } = this.props.prop;\n        //  console.log(this.props.prop);\n        //  console.log(stateDt);\n        // const img  \n        const year = (stateDt+\"\").substring(0,4);\n        const month = (stateDt+\"\").substring(4,6)[0] === '0' ? (stateDt+\"\").substring(5,6) : (stateDt+\"\").substring(4,6);\n        const day =  (stateDt+\"\").substring(6);\n        return (\n            <div className=\"col-md-6 col-lg-4 d-flex align-items-stretch container-fluid  justify-content-center \">\n                <div className=\"card mb-3 d-flex\">\n                    {/* <img className=\"card-img-top\" src={img} alt={imgalt}/> */}\n                    <div className=\"card-body\">\n                        <h4 className=\"card-title\">\n                        {year}년 {month}월 {day}일\n                        </h4>\n                        <table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                            <th scope=\"col\" >확진자 수 </th>\n                            <th scope=\"col\">격리해제 수 </th>\n                            <th scope=\"col\">검사진행 수</th>\n                            <th scope=\"col\">치료중인 환자 수</th>\n                            <th scope=\"col\">사망자 수</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                            <td>{decideCnt}명</td>\n                            <td>{clearCnt}명</td>\n                            <td>{examCnt}명</td>\n                            <td>{deathCnt}명</td>\n                            <td>{careCnt}명</td>\n                            </tr>\n                        </tbody>\n                        </table>\n                        <p className=\"card-text\">누적 확진률 : {Math.round(accDefRate,3)}%</p>\n                        <p className=\"card-text\">갱신 시각 : {createDt}</p>\n                        {/* <p className=\"card-text\"> */}\n                            {/* 치료중인 환자 수 : {careCnt}</p> */}\n                        {/* <a href=\"#\" className=\"btn btn-primary\">Check</a> */}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","export default __webpack_public_path__ + \"static/media/covid.2de7ca32.png\";","import React from 'react';\n// import Card from './Card';\nimport axios from 'axios';\nimport Card from './Card';\nimport styled from 'styled-components';\nimport img from './covid.png'\n\nclass CardContainer extends React.Component{\n    constructor(...args){\n        super(...args);\n        this.state = {\n            data : null,\n        }\n    }\n \n\n    async componentDidMount(){\n        \n        try {\n            const makedata = await axios.get('/search');\n            if(!this.state.data){\n                console.log(makedata.data.data);\n                return this.setState({\n                    data: makedata.data.data\n                })\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n            \n    \n    }\n    componentWillUnmount() {\n        this.setState({\n            data: null\n        })\n    }\n    render() {\n        const CardStyle = styled.div`\n            display: flex;\n            color: black;\n            flex-wrap: wrap;\n            background-color: skyblue;\n            justify-content: space-between;\n        `;\n\n        return (\n            <CardStyle className=\"container-fluid d-flex justify-content-center\">\n                {\n                    !this.state.data ? <em>Wait!</em> : ( \n                        this.state.data ? this.state.data.map((test,index) => <Card prop={test} key={index} />) : <em>Loading...</em> )\n                } \n            </CardStyle>\n        );\n    }\n}\n\nexport default CardContainer;","import React from 'react'\n\n\nclass Header extends React.Component {\n\n    render(){\n        return (\n            <nav className=\"navbar navbar-dark bg-primary justify-content-md-center\">\n  <span className=\"navbar-brand mb-0 h1\">Corona Infomation</span>\n</nav>\n        );\n    }\n}\n \nexport default Header;","import React from 'react';\nimport './App.css';\nimport CardContainer from './components/CardContainer';\nimport Header from './components/Header.js';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <Header></Header>\n        <CardContainer></CardContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}